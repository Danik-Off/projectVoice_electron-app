import React, { useEffect, useRef, useState, useCallback } from 'react';
import { observer } from 'mobx-react';
import { useParams } from 'react-router-dom';
import { messageStore } from '../../../../store/messageStore';
import channelsStore from '../../../../store/channelsStore';
import MessageItem from './MessageItem';
import MessageInput from './MessageInput';
import './MessageList.scss';
import roomStore from '../../../../store/roomStore';

const MessageList: React.FC = observer(() => {
    const { roomId } = useParams<{ roomId: string }>();
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const messagesContainerRef = useRef<HTMLDivElement>(null);
    const [showScrollToBottom, setShowScrollToBottom] = useState(false);
    const [isNearBottom, setIsNearBottom] = useState(true);

    const { messages, loading, error, hasMore, currentChannelId } = messageStore;
    const { currentChannel, channels } = channelsStore;
    const isConnected = roomStore.currentVoiceChannel !== null;

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('MessageList Debug:', {
        roomId,
        currentChannel,
        currentChannelId,
        channels: channels.length,
        messages: messages.length,
        loading,
        error
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        if (roomId && channels.length > 0) {
            const channel = channels.find(ch => ch.id === parseInt(roomId));
            if (channel) {
                channelsStore.setCurrentChannel(channel);
                console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:', channel);
            } else {
                console.log('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', roomId, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:', channels);
            }
        } else if (roomId && channels.length === 0) {
            console.log('–ö–∞–Ω–∞–ª—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, roomId:', roomId);
        }
    }, [roomId, channels]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
    useEffect(() => {
        if (currentChannel?.id) {
            messageStore.setCurrentChannel(currentChannel.id);
        }
    }, [currentChannel?.id]);

    // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
    const scrollToBottom = useCallback(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, []);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É —Å–ø–∏—Å–∫–∞
    const checkIfNearBottom = useCallback(() => {
        if (!messagesContainerRef.current) return;
        
        const { scrollTop, scrollHeight, clientHeight } = messagesContainerRef.current;
        const threshold = 100;
        const isNear = scrollHeight - scrollTop - clientHeight < threshold;
        setIsNearBottom(isNear);
        setShowScrollToBottom(!isNear);
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const handleScroll = useCallback(() => {
        checkIfNearBottom();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –≤–≤–µ—Ä—Ö
        if (messagesContainerRef.current && messagesContainerRef.current.scrollTop === 0 && hasMore) {
            messageStore.loadMoreMessages();
        }
    }, [checkIfNearBottom, hasMore]);

    // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
    useEffect(() => {
        if (isNearBottom) {
            scrollToBottom();
        }
    }, [messages.length, isNearBottom, scrollToBottom]);

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞—á–∞–ª—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    useEffect(() => {
        if (messagesContainerRef.current && !isNearBottom) {
            const container = messagesContainerRef.current;
            const oldHeight = container.scrollHeight;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            const oldScrollTop = container.scrollTop;
            
            // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
            requestAnimationFrame(() => {
                const newHeight = container.scrollHeight;
                const heightDifference = newHeight - oldHeight;
                container.scrollTop = oldScrollTop + heightDifference;
            });
        }
    }, [messages, isNearBottom]);

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const groupMessages = () => {
        const groups: Array<{ userId: number; messages: typeof messages }> = [];
        
        messages.forEach(message => {
            const lastGroup = groups[groups.length - 1];
            
            if (lastGroup && lastGroup.userId === message.userId) {
                lastGroup.messages.push(message);
            } else {
                groups.push({
                    userId: message.userId,
                    messages: [message]
                });
            }
        });
        
        return groups;
    };

    const messageGroups = groupMessages();

    const EmptyChatState: React.FC<{ channelName?: string }> = ({ channelName }) => (
        <div className="no-messages">
            <div className="no-messages-content">
                <div className="empty-chat-icon">
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M20 2H4C2.9 2 2 2.9 2 4V22L6 18H20C21.1 18 22 17.1 22 16V4C22 2.9 21.1 2 20 2Z" 
                              fill="var(--accent-color)" opacity="0.3"/>
                        <path d="M7 9H17V11H7V9ZM7 13H13V15H7V13Z" fill="var(--accent-color)"/>
                    </svg>
                </div>
                <h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ #{channelName || '–∫–∞–Ω–∞–ª'}!</h3>
                <p>–≠—Ç–æ –Ω–∞—á–∞–ª–æ –∫–∞–Ω–∞–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.</p>
                <div className="empty-chat-tips">
                    <div className="tip">
                        <span className="tip-icon">üí¨</span>
                        <span>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ</span>
                    </div>
                    <div className="tip">
                        <span className="tip-icon">üë•</span>
                        <span>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ —Å–µ—Ä–≤–µ—Ä</span>
                    </div>
                    <div className="tip">
                        <span className="tip-icon">‚öôÔ∏è</span>
                        <span>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –ø–æ–¥ —Å–µ–±—è</span>
                    </div>
                </div>
            </div>
        </div>
    );

    const NoChannelSelected: React.FC = () => (
        <div className="no-channel-selected">
            <div className="no-channel-content">
                <div className="empty-chat-icon">
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20Z" 
                              fill="var(--accent-color)" opacity="0.3"/>
                        <path d="M12 6C9.79 6 8 7.79 8 10C8 12.21 9.79 14 12 14C14.21 14 16 12.21 16 10C16 7.79 14.21 6 12 6ZM12 12C10.9 12 10 11.1 10 10C10 8.9 10.9 8 12 8C13.1 8 14 8.9 14 10C14 11.1 13.1 12 12 12Z" 
                              fill="var(--accent-color)"/>
                    </svg>
                </div>
                <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª</h3>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.</p>
            </div>
        </div>
    );

    const VoiceStatusIndicator: React.FC = () => {
        if (!isConnected) return null;

        return (
            <div className="voice-status-indicator">
                <div className="voice-status-icon">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 1C10.9 1 10 1.9 10 3V11C10 12.1 10.9 13 12 13C13.1 13 14 12.1 14 11V3C14 1.9 13.1 1 12 1Z" 
                              fill="var(--accent-color)"/>
                        <path d="M19 10V11C19 14.87 15.87 18 12 18C8.13 18 5 14.87 5 11V10C5 9.45 5.45 9 6 9C6.55 9 7 9.45 7 10V11C7 13.76 9.24 16 12 16C14.76 16 17 13.76 17 11V10C17 9.45 17.45 9 18 9C18.55 9 19 9.45 19 10Z" 
                              fill="var(--accent-color)"/>
                        <path d="M12 19C12.55 19 13 19.45 13 20V23C13 23.55 12.55 24 12 24C11.45 24 11 23.55 11 23V20C11 19.45 11.45 19 12 19Z" 
                              fill="var(--accent-color)"/>
                    </svg>
                </div>
                <span className="voice-status-text">–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É</span>
            </div>
        );
    };

    if (!currentChannel) {
        return (
            <div className="message-list-container">
                <NoChannelSelected />
            </div>
        );
    }

    return (
        <div className="message-list-container">
            <div className="channel-header">
                <div className="channel-info">
                    <h2 className="channel-name">#{currentChannel.name}</h2>
                    <span className="channel-description">
                        {currentChannel.description || '–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª'}
                    </span>
                </div>
                <VoiceStatusIndicator />
                <div className="channel-actions">
                    <button className="action-btn" title="–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π">
                        üîç
                    </button>
                    <button className="action-btn" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞">
                        ‚öôÔ∏è
                    </button>
                </div>
            </div>

            <div className="messages-area">
                <div 
                    className="messages-container"
                    ref={messagesContainerRef}
                    onScroll={handleScroll}
                >
                    {loading && messages.length === 0 && (
                        <div className="loading-messages">
                            <div className="loading-spinner"></div>
                            <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</span>
                        </div>
                    )}

                    {error && (
                        <div className="error-message">
                            <span>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {error}</span>
                            <button onClick={() => messageStore.loadMessages()}>
                                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            </button>
                        </div>
                    )}

                    {!loading && messages.length === 0 && (
                        <EmptyChatState channelName={currentChannel.name} />
                    )}

                    {messageGroups.map((group, groupIndex) => (
                        <div key={`${group.userId}-${groupIndex}`} className="message-group">
                            {group.messages.map((message, messageIndex) => (
                                <MessageItem
                                    key={message.id}
                                    message={message}
                                    isFirstInGroup={messageIndex === 0}
                                />
                            ))}
                        </div>
                    ))}

                    {loading && messages.length > 0 && (
                        <div className="loading-more">
                            <div className="loading-spinner small"></div>
                            <span>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...</span>
                        </div>
                    )}

                    <div ref={messagesEndRef} />
                </div>

                {showScrollToBottom && (
                    <button 
                        className="scroll-to-bottom-btn"
                        onClick={scrollToBottom}
                        title="–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º"
                    >
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                            <path 
                                d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" 
                                fill="currentColor"
                            />
                        </svg>
                        <span>–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</span>
                    </button>
                )}
            </div>

            <MessageInput />
        </div>
    );
});

export default MessageList;
