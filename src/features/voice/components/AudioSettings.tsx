import React, { useState, useEffect, useRef } from 'react';
import { observer } from 'mobx-react-lite';
import { useTranslation } from 'react-i18next';
import audioSettingsStore from '../../../../store/AudioSettingsStore';
import roomStore from '../../../../store/roomStore';
import './audioSettings.scss';

const AudioSettings: React.FC = observer(() => {
    const { t } = useTranslation();
    const [isMicActive, setIsMicActive] = useState(false);
    const [isSpeakerActive, setIsSpeakerActive] = useState(false);
    const isReconnectingRef = useRef(false);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    useEffect(() => {
        let lastSettings = '';

        const checkForChanges = () => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if (isReconnectingRef.current) {
                return;
            }

            const currentSettings = {
                microphone: audioSettingsStore.selectedMicrophone?.deviceId,
                speaker: audioSettingsStore.selectedSpeaker?.deviceId,
                volume: audioSettingsStore.volume,
                echoCancellation: audioSettingsStore.echoCancellation,
                noiseSuppression: audioSettingsStore.noiseSuppression,
                autoGainControl: audioSettingsStore.autoGainControl,
                voiceEnhancement: audioSettingsStore.voiceEnhancement,
                voiceIsolation: audioSettingsStore.voiceIsolation,
                voiceClarity: audioSettingsStore.voiceClarity,
                backgroundNoiseReduction: audioSettingsStore.backgroundNoiseReduction,
                voiceBoost: audioSettingsStore.voiceBoost,
                bassBoost: audioSettingsStore.bassBoost,
                trebleBoost: audioSettingsStore.trebleBoost,
                stereoEnhancement: audioSettingsStore.stereoEnhancement,
                spatialAudio: audioSettingsStore.spatialAudio,
                sampleRate: audioSettingsStore.sampleRate,
                bitrate: audioSettingsStore.bitrate,
                latency: audioSettingsStore.latency,
                channelCount: audioSettingsStore.channelCount
            };

            const currentSettingsString = JSON.stringify(currentSettings);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if (currentSettingsString !== lastSettings && roomStore.currentVoiceChannel) {
                lastSettings = currentSettingsString;
                console.log('AudioSettings: Settings changed, auto-reconnecting...');
                handleAutoReconnect();
            }
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 1000–º—Å (—É–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª)
        const interval = setInterval(checkForChanges, 1000);

        return () => clearInterval(interval);
    }, []);

    const handleAutoReconnect = async () => {
        if (roomStore.currentVoiceChannel && !isReconnectingRef.current) {
            isReconnectingRef.current = true;
            const currentChannel = roomStore.currentVoiceChannel;
            
            console.log('AudioSettings: Starting auto-reconnect to channel:', currentChannel.name);
            
            try {
                // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                roomStore.disconnectToRoom();
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                setTimeout(() => {
                    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    roomStore.connectToRoom(currentChannel.id, currentChannel.name);
                    console.log('AudioSettings: Auto-reconnect completed');
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        isReconnectingRef.current = false;
                    }, 3000);
                }, 1000);
            } catch (error) {
                console.error('AudioSettings: Error during auto-reconnect:', error);
                isReconnectingRef.current = false;
            }
        }
    };

    return (
        <div className="settings-section">
            <div className="section-header">
                <h2>{t('settingsPage.audio.title')}</h2>
                <p>{t('settingsPage.audio.description')}</p>
            </div>


            <div className="section-content">
                {/* Input Device Settings */}
                    <div className="settings-card">
                        <div className="card-header">
                            <div className="header-content">
                            <div className="icon-container">
                                üé§
                            </div>
                                <div className="header-text">
                                <h3>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞</h3>
                                <p>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø–∏—Å–∏</p>
                            </div>
                        </div>
                                    </div>
                                    
                    <div className="card-content">
                        {/* Microphone Selection */}
                                    <div className="setting-group">
                            <div className="setting-header">
                                        <label className="setting-label">
                                    <span>–ú–∏–∫—Ä–æ—Ñ–æ–Ω</span>
                                        </label>
                            </div>
                                        <div className="setting-control">
                                            <select
                                    className="settings-select"
                                                value={audioSettingsStore.selectedMicrophone?.deviceId || ''}
                                    onChange={(e) => audioSettingsStore.setMicrophone(e.target.value)}
                                            >
                                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω</option>
                                                {audioSettingsStore.microphoneDevices.map((device) => (
                                                    <option key={device.deviceId} value={device.deviceId}>
                                                        {device.label || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}
                                                    </option>
                                                ))}
                                            </select>
                                <div className="setting-description">
                                    –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
                                </div>
                                        </div>
                                    </div>

                        {/* Input Volume */}
                                    <div className="setting-group">
                            <div className="setting-header">
                                        <label className="setting-label">
                                    <span>–ì—Ä–æ–º–∫–æ—Å—Ç—å –≤–≤–æ–¥–∞</span>
                                        </label>
                            </div>
                                        <div className="setting-control">
                                <div className="volume-control">
                                                    <input
                                                        type="range"
                                                        min="0"
                                        max="200"
                                                        value={audioSettingsStore.volume}
                                                        onChange={(e) => audioSettingsStore.setVolume(Number(e.target.value))}
                                                        className="settings-slider"
                                                    />
                                    <span className="volume-value">{audioSettingsStore.volume}%</span>
                                </div>
                                <div className="volume-visualizer">
                                    <div className="volume-bar">
                                        <div 
                                            className="volume-fill" 
                                            style={{ width: `${Math.min(audioSettingsStore.volume, 100)}%` }}
                                        />
                                        {audioSettingsStore.volume > 100 && (
                                            <div 
                                                className="volume-fill-over" 
                                                style={{ width: `${Math.min(audioSettingsStore.volume - 100, 100)}%` }}
                                            />
                                        )}
                                    </div>
                                </div>
                                <div className="setting-description">
                                    –£—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∏—Å–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (0-200%)
                                            </div>
                                        </div>
                                    </div>

                        {/* Channel Selection */}
                                    <div className="setting-group">
                            <div className="setting-header">
                                        <label className="setting-label">
                                    <span>–ö–∞–Ω–∞–ª—ã –∑–∞–ø–∏—Å–∏</span>
                                        </label>
                            </div>
                                        <div className="setting-control">
                                            <div className="radio-group">
                                                <label className="radio-item">
                                                    <input
                                                        type="radio"
                                                        name="channel"
                                                        value="mono"
                                                        checked={audioSettingsStore.channelCount === 1}
                                                        onChange={() => audioSettingsStore.setChannelCount('mono')}
                                                    />
                                        <span className="radio-label">–ú–æ–Ω–æ (1 –∫–∞–Ω–∞–ª)</span>
                                                </label>
                                                <label className="radio-item">
                                                    <input
                                                        type="radio"
                                                        name="channel"
                                                        value="stereo"
                                                        checked={audioSettingsStore.channelCount === 2}
                                                        onChange={() => audioSettingsStore.setChannelCount('stereo')}
                                                    />
                                        <span className="radio-label">–°—Ç–µ—Ä–µ–æ (2 –∫–∞–Ω–∞–ª–∞)</span>
                                                </label>
                                            </div>
                                <div className="setting-description">
                                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏
                                </div>
                                        </div>
                                    </div>

                        {/* Test Microphone */}
                                    <div className="setting-group">
                            <div className="setting-header">
                                        <label className="setting-label">
                                    <span>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</span>
                                        </label>
                            </div>
                                        <div className="setting-control">
                                            <button 
                                                className="settings-button settings-button--test"
                                    onClick={async () => {
                                        setIsMicActive(true);
                                        await audioSettingsStore.testMicrophone();
                                        setTimeout(() => setIsMicActive(false), 3000);
                                    }}
                                >
                                    {isMicActive ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'}
                                            </button>
                                <div className="setting-description">
                                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                                </div>
                            </div>
                                        </div>
                                    </div>
                                </div>

                {/* Output Device Settings */}
                <div className="settings-card">
                    <div className="card-header">
                        <div className="header-content">
                            <div className="icon-container">
                                üîä
                            </div>
                            <div className="header-text">
                                <h3>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞</h3>
                                <p>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–Ω–∞–º–∏–∫–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è</p>
                            </div>
                        </div>
                                    </div>
                                    
                    <div className="card-content">
                        {/* Speaker Selection */}
                                    <div className="setting-group">
                            <div className="setting-header">
                                        <label className="setting-label">
                                    <span>–î–∏–Ω–∞–º–∏–∫–∏</span>
                                        </label>
                            </div>
                                        <div className="setting-control">
                                            <select
                                    className="settings-select"
                                                value={audioSettingsStore.selectedSpeaker?.deviceId || ''}
                                                onChange={(e) => audioSettingsStore.setSpeaker(e.target.value)}
                                            >
                                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</option>
                                                {audioSettingsStore.speakerDevices.map((device) => (
                                                    <option key={device.deviceId} value={device.deviceId}>
                                                        {device.label || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}
                                                    </option>
                                                ))}
                                            </select>
                                <div className="setting-description">
                                    –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                                </div>
                            </div>
                        </div>

                        {/* Output Volume */}
                        <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–ì—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞</span>
                                </label>
                            </div>
                            <div className="setting-control">
                                <div className="volume-control">
                                    <input
                                        type="range"
                                        min="0"
                                        max="200"
                                        value={50}
                                        onChange={(e) => console.log('Speaker volume:', e.target.value)}
                                        className="settings-slider"
                                    />
                                    <span className="volume-value">50%</span>
                                </div>
                                <div className="volume-visualizer">
                                    <div className="volume-bar">
                                        <div 
                                            className="volume-fill" 
                                            style={{ width: '50%' }}
                                        />
                                    </div>
                                </div>
                                <div className="setting-description">
                                    –£—Ä–æ–≤–µ–Ω—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (0-200%)
                                </div>
                                        </div>
                                    </div>

                        {/* Speaker Mute */}
                                    <div className="setting-group">
                            <div className="setting-header">
                                        <label className="setting-label">
                                    <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º</span>
                                        </label>
                            </div>
                                        <div className="setting-control">
                                <div className="settings-toggle">
                                                    <input
                                                        type="checkbox"
                                                        checked={!audioSettingsStore.isSpeakerMuted}
                                                        onChange={() => audioSettingsStore.toggleSpeakerMute()}
                                                    />
                                    <span className="toggle-switch"></span>
                                    <span className="toggle-label">–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫</span>
                                </div>
                                <div className="setting-description">
                                    –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
                                            </div>
                                        </div>
                                    </div>

                        {/* Test Speaker */}
                                    <div className="setting-group">
                            <div className="setting-header">
                                        <label className="setting-label">
                                    <span>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–æ–≤</span>
                                        </label>
                            </div>
                                        <div className="setting-control">
                                            <button 
                                                className="settings-button settings-button--test"
                                    onClick={async () => {
                                        setIsSpeakerActive(true);
                                        await audioSettingsStore.testSpeakers();
                                        setTimeout(() => setIsSpeakerActive(false), 3000);
                                    }}
                                >
                                    {isSpeakerActive ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'}
                                            </button>
                                <div className="setting-description">
                                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –¥–∏–Ω–∞–º–∏–∫–æ–≤
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Audio Processing Settings */}
                    <div className="settings-card">
                        <div className="card-header">
                            <div className="header-content">
                            <div className="icon-container">
                                üéõÔ∏è
                            </div>
                                <div className="header-text">
                                <h3>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—É–∫–∞</h3>
                                <p>–û—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ</p>
                            </div>
                        </div>
                    </div>
                    
                        <div className="card-content">
                        {/* Basic Processing */}
                            <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</span>
                                </label>
                            </div>
                                    <div className="setting-control">
                                        <div className="checkbox-group">
                                    <label className="settings-checkbox">
                                                <input
                                                    type="checkbox"
                                                    checked={audioSettingsStore.echoCancellation}
                                                    onChange={(e) => audioSettingsStore.setEchoCancellation(e.target.checked)}
                                                />
                                        <span className="checkmark"></span>
                                        <span className="checkbox-label">–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —ç—Ö–∞</span>
                                            </label>
                                    <label className="settings-checkbox">
                                                <input
                                                    type="checkbox"
                                                    checked={audioSettingsStore.noiseSuppression}
                                                    onChange={(e) => audioSettingsStore.setNoiseSuppression(e.target.checked)}
                                                />
                                        <span className="checkmark"></span>
                                        <span className="checkbox-label">–®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ</span>
                                            </label>
                                    <label className="settings-checkbox">
                                                <input
                                                    type="checkbox"
                                                    checked={audioSettingsStore.autoGainControl}
                                                    onChange={(e) => audioSettingsStore.setAutoGainControl(e.target.checked)}
                                                />
                                        <span className="checkmark"></span>
                                        <span className="checkbox-label">–ê–≤—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏</span>
                                            </label>
                                </div>
                                <div className="setting-description">
                                    –û—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —É–ª—É—á—à–µ–Ω–∏—è –∑–≤—É–∫–∞
                                </div>
                            </div>
                        </div>

                        {/* Advanced Processing */}
                            <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</span>
                                </label>
                            </div>
                                <div className="setting-control">
                                    <div className="checkbox-group">
                                    <label className="settings-checkbox">
                                            <input
                                                type="checkbox"
                                                checked={audioSettingsStore.voiceEnhancement}
                                                onChange={(e) => audioSettingsStore.setVoiceEnhancement(e.target.checked)}
                                            />
                                        <span className="checkmark"></span>
                                        <span className="checkbox-label">–£–ª—É—á—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞</span>
                                        </label>
                                    <label className="settings-checkbox">
                                            <input
                                                type="checkbox"
                                                checked={audioSettingsStore.voiceIsolation}
                                                onChange={(e) => audioSettingsStore.setVoiceIsolation(e.target.checked)}
                                            />
                                        <span className="checkmark"></span>
                                        <span className="checkbox-label">–ò–∑–æ–ª—è—Ü–∏—è –≥–æ–ª–æ—Å–∞</span>
                                        </label>
                                </div>
                                <div className="setting-description">
                                    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —É–ª—É—á—à–µ–Ω–∏—è
                                </div>
                            </div>
                                    </div>
                                </div>
                            </div>

                {/* Audio Effects Settings */}
                <div className="settings-card">
                    <div className="card-header">
                        <div className="header-content">
                            <div className="icon-container">
                                ‚ú®
                            </div>
                            <div className="header-text">
                                <h3>–ê—É–¥–∏–æ —ç—Ñ—Ñ–µ–∫—Ç—ã</h3>
                                <p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–≤—É—á–∞–Ω–∏—è</p>
                            </div>
                        </div>
                    </div>
                    
                    <div className="card-content">
                        {/* Voice Clarity */}
                            <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–ß–µ—Ç–∫–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞</span>
                                </label>
                            </div>
                                <div className="setting-control">
                                <div className="slider-control">
                                    <input
                                        type="range"
                                        min="0"
                                        max="100"
                                        value={audioSettingsStore.voiceClarity * 100}
                                        onChange={(e) => audioSettingsStore.setVoiceClarity(Number(e.target.value) / 100)}
                                        className="settings-slider"
                                    />
                                    <span className="slider-value">{Math.round(audioSettingsStore.voiceClarity * 100)}%</span>
                                </div>
                                <div className="setting-description">
                                    –£–ª—É—á—à–∞–µ—Ç —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ—Å—Ç—å —Ä–µ—á–∏
                                </div>
                            </div>
                        </div>

                        {/* Noise Reduction */}
                        <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–°–Ω–∏–∂–µ–Ω–∏–µ —à—É–º–∞</span>
                                </label>
                            </div>
                            <div className="setting-control">
                                <div className="slider-control">
                                    <input
                                        type="range"
                                        min="0"
                                        max="100"
                                        value={audioSettingsStore.backgroundNoiseReduction * 100}
                                        onChange={(e) => audioSettingsStore.setBackgroundNoiseReduction(Number(e.target.value) / 100)}
                                        className="settings-slider"
                                    />
                                    <span className="slider-value">{Math.round(audioSettingsStore.backgroundNoiseReduction * 100)}%</span>
                                </div>
                                <div className="setting-description">
                                    –£–±–∏—Ä–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏
                                </div>
                            </div>
                        </div>

                        {/* Voice Boost */}
                        <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–£—Å–∏–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞</span>
                                </label>
                            </div>
                            <div className="setting-control">
                                <div className="slider-control">
                                    <input
                                        type="range"
                                        min="0"
                                        max="100"
                                        value={audioSettingsStore.voiceBoost * 100}
                                        onChange={(e) => audioSettingsStore.setVoiceBoost(Number(e.target.value) / 100)}
                                        className="settings-slider"
                                    />
                                    <span className="slider-value">{Math.round(audioSettingsStore.voiceBoost * 100)}%</span>
                                        </div>
                                <div className="setting-description">
                                    –£—Å–∏–ª–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —á–∞—Å—Ç–æ—Ç—ã
                                </div>
                                </div>
                            </div>

                        {/* Bass Boost */}
                            <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–£—Å–∏–ª–µ–Ω–∏–µ –±–∞—Å–æ–≤</span>
                                </label>
                            </div>
                                <div className="setting-control">
                                <div className="slider-control">
                                            <input
                                                type="range"
                                                min="0"
                                                max="100"
                                                value={audioSettingsStore.bassBoost * 100}
                                                onChange={(e) => audioSettingsStore.setBassBoost(Number(e.target.value) / 100)}
                                                className="settings-slider"
                                            />
                                            <span className="slider-value">{Math.round(audioSettingsStore.bassBoost * 100)}%</span>
                                </div>
                                <div className="setting-description">
                                    –£—Å–∏–ª–∏–≤–∞–µ—Ç –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
                                </div>
                            </div>
                        </div>

                        {/* Treble Boost */}
                        <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–£—Å–∏–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç</span>
                                </label>
                                        </div>
                            <div className="setting-control">
                                <div className="slider-control">
                                            <input
                                                type="range"
                                                min="0"
                                                max="100"
                                                value={audioSettingsStore.trebleBoost * 100}
                                                onChange={(e) => audioSettingsStore.setTrebleBoost(Number(e.target.value) / 100)}
                                                className="settings-slider"
                                            />
                                            <span className="slider-value">{Math.round(audioSettingsStore.trebleBoost * 100)}%</span>
                                </div>
                                <div className="setting-description">
                                    –£—Å–∏–ª–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Quality Settings */}
                <div className="settings-card">
                    <div className="card-header">
                        <div className="header-content">
                            <div className="icon-container">
                                ‚öôÔ∏è
                            </div>
                            <div className="header-text">
                                <h3>–ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞</h3>
                                <p>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞</p>
                                        </div>
                                        </div>
                    </div>
                    
                    <div className="card-content">
                        {/* Quality Presets */}
                        <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞</span>
                                </label>
                            </div>
                            <div className="setting-control">
                                <div className="quality-presets">
                                    <button
                                        className={`preset-button ${audioSettingsStore.audioQuality === 'low' ? 'active' : ''}`}
                                        onClick={() => audioSettingsStore.setAudioQuality('low')}
                                    >
                                        <div className="preset-title">–ù–∏–∑–∫–æ–µ</div>
                                        <div className="preset-desc">–≠–∫–æ–Ω–æ–º–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞</div>
                                        <div className="preset-specs">16 –∫–ì—Ü, 64 kbps</div>
                                    </button>
                                    <button
                                        className={`preset-button ${audioSettingsStore.audioQuality === 'medium' ? 'active' : ''}`}
                                        onClick={() => audioSettingsStore.setAudioQuality('medium')}
                                    >
                                        <div className="preset-title">–°—Ä–µ–¥–Ω–µ–µ</div>
                                        <div className="preset-desc">–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å</div>
                                        <div className="preset-specs">24 –∫–ì—Ü, 128 kbps</div>
                                    </button>
                                    <button
                                        className={`preset-button ${audioSettingsStore.audioQuality === 'high' ? 'active' : ''}`}
                                        onClick={() => audioSettingsStore.setAudioQuality('high')}
                                    >
                                        <div className="preset-title">–í—ã—Å–æ–∫–æ–µ</div>
                                        <div className="preset-desc">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</div>
                                        <div className="preset-specs">48 –∫–ì—Ü, 256 kbps</div>
                                    </button>
                                </div>
                                <div className="setting-description">
                                    –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞
                                    </div>
                                </div>
                            </div>

                        {/* Technical Parameters */}
                            <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</span>
                                </label>
                            </div>
                                <div className="setting-control">
                                <div className="advanced-controls">
                                    <div className="control-group">
                                        <label>–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏</label>
                                        <select 
                                            className="settings-select"
                                            value={audioSettingsStore.sampleRate}
                                            onChange={(e) => audioSettingsStore.setSampleRate(Number(e.target.value))}
                                        >
                                            <option value={8000}>8 –∫–ì—Ü</option>
                                            <option value={16000}>16 –∫–ì—Ü</option>
                                            <option value={24000}>24 –∫–ì—Ü</option>
                                            <option value={48000}>48 –∫–ì—Ü</option>
                                        </select>
                                    </div>
                                    <div className="control-group">
                                        <label>–ë–∏—Ç—Ä–µ–π—Ç</label>
                                        <select 
                                            className="settings-select"
                                            value={audioSettingsStore.bitrate}
                                            onChange={(e) => audioSettingsStore.setBitrate(Number(e.target.value))}
                                        >
                                            <option value={64}>64 kbps</option>
                                            <option value={128}>128 kbps</option>
                                            <option value={256}>256 kbps</option>
                                            <option value={320}>320 kbps</option>
                                        </select>
                                    </div>
                                    <div className="control-group">
                                        <label>–ó–∞–¥–µ—Ä–∂–∫–∞</label>
                                        <select 
                                            className="settings-select"
                                            value={audioSettingsStore.latency}
                                            onChange={(e) => audioSettingsStore.setLatency(Number(e.target.value))}
                                        >
                                            <option value={50}>50 –º—Å</option>
                                            <option value={100}>100 –º—Å</option>
                                            <option value={200}>200 –º—Å</option>
                                            <option value={500}>500 –º—Å</option>
                                        </select>
                                    </div>
                                </div>
                                <div className="setting-description">
                                    –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                                    </div>
                                </div>
                            </div>

                        {/* Reset Settings */}
                        <div className="setting-group">
                            <div className="setting-header">
                                <label className="setting-label">
                                    <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</span>
                                </label>
                            </div>
                            <div className="setting-control">
                                <div className="button-group">
                                    <button 
                                        className="settings-button settings-button--test"
                                        onClick={() => audioSettingsStore.applyAllSettings()}
                                    >
                                        –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                    </button>
                                    <button 
                                        className="settings-button settings-button--danger"
                                        onClick={() => audioSettingsStore.resetToDefaults()}
                                    >
                                        –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                    </button>
                                </div>
                                <div className="setting-description">
                                    –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
});

export default AudioSettings;