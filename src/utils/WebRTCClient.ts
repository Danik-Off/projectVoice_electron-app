import { reaction } from 'mobx';
import { iceServers } from '../configs/iceServers';
import type { Signal } from '../types/WebRTCClient.types';
import audioSettingsStore from '../store/AudioSettingsStore';
import participantVolumeStore from '../store/ParticipantVolumeStore';
import voiceActivityService from '../services/VoiceActivityService';
class WebRTCClient {
    public sendSignal: null | ((signal: Signal) => void) = null;

    public changeState: null | ((id: string, signal: Event) => void) = null;

    private readonly remoteStreams: Map<string, MediaStream> = new Map();
    private readonly peerConnections: Map<string, RTCPeerConnection> = new Map();
    private readonly remoteAudioElements: Map<string, HTMLAudioElement> = new Map();
    private readonly audioContexts: Map<string, AudioContext> = new Map();
    private readonly gainNodes: Map<string, GainNode> = new Map();
    private readonly audioSources: Map<string, MediaStreamAudioSourceNode> = new Map();

    private localStream: MediaStream | null = null;

    //—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–µ–¥–∏–∞
    public async initializeMedia() {
        console.log('WebRTCClient: Initializing media...');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VoiceActivity —Å–µ—Ä–≤–∏—Å
        voiceActivityService.initialize();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ—Ç–æ–∫
        if (audioSettingsStore.stream && audioSettingsStore.stream.getAudioTracks().length > 0) {
            console.log('WebRTCClient: Stream already exists, setting up VoiceActivity immediately');
            this.setupLocalVoiceActivity();
        }
        
        reaction(
            () => audioSettingsStore.stream,
            (val) => {
                console.log('üöÄ ~ WebRTCClient ~ reaction triggered ~ stream:', val);
                console.log('üöÄ ~ WebRTCClient ~ reaction triggered ~ tracks:', val?.getAudioTracks().length || 0);
                this.resendlocalStream();
                this.setupLocalVoiceActivity();
            },
        );
    }

    //–õ–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    public createPeerConnection(id: string) {
        console.log('—Å–æ–∑–¥–∞–Ω–∏–µ peerConnection c id', id);
        const newPeerConnection = new RTCPeerConnection({
            iceServers: iceServers,
            iceCandidatePoolSize: 10, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            bundlePolicy: 'max-bundle', // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            rtcpMuxPolicy: 'require', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ RTCP
        });

        newPeerConnection.onicecandidate = (event) => {
            console.log(event);
            if (!event.candidate) {
                console.error('candidate –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }
            if (!this.sendSignal) {
                console.error('sendSignal –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }
            this.sendSignal({
                to: id,
                type: 'candidate',
                candidate: event.candidate,
            });
        };

        newPeerConnection.onconnectionstatechange = (state) => {
            this.changeState && this.changeState(id, state);
        };

        newPeerConnection.ontrack = (event) => {
            console.log('ontrack', id, event.track.kind);
            if (event.track.kind === 'audio') {
                this.addRemoteStream(event.track, id);
            }
        };

        this.peerConnections.set(id, newPeerConnection);
        this.addLocalStream(id);
        return newPeerConnection;
    }

    public async createOffer(id: string) {
        console.log('—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ–µ—Ä–∞');
        const peerConnection = this.createPeerConnection(id);
        try {
            // –°–æ–∑–¥–∞–µ–º offer —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞
            const offer = await peerConnection.createOffer({
                offerToReceiveAudio: true,
                offerToReceiveVideo: false,
            });
            
            // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º SDP –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞
            const modifiedSdp = this.optimizeSdpForHighQualityAudio(offer.sdp || '');
            const optimizedOffer: RTCSessionDescriptionInit = { type: offer.type, sdp: modifiedSdp };
            
            await peerConnection.setLocalDescription(optimizedOffer);
            const sdp = optimizedOffer.sdp;

            if (!this.sendSignal) {
                console.error('sendSignal –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è null');
                return;
            }

            if (!sdp) {
                console.error('offer.sdp –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è null');
                return;
            }

            this.sendSignal({
                to: id,
                type: 'offer',
                sdp: sdp,
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
        }
    }

    public async createAnswer(id: string) {
        console.log('—Å–æ–∑–¥–∞–Ω–∏–µ  –æ—Ç–≤–µ—Ç–∞');
        const peerConnection = this.peerConnections.get(id);
        if (!peerConnection) {
            console.error('peerConnection –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞');
            return;
        }
        try {
            // –°–æ–∑–¥–∞–µ–º answer —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const answer = await peerConnection.createAnswer({
                voiceActivityDetection: true,
            });
            
            // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º SDP –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞
            const modifiedSdp = this.optimizeSdpForHighQualityAudio(answer.sdp || '');
            const optimizedAnswer = { ...answer, sdp: modifiedSdp };
            
            await peerConnection.setLocalDescription(optimizedAnswer);
            const sdp = optimizedAnswer.sdp;

            if (!this.sendSignal) {
                console.error('sendSignalr –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è null');
                return;
            }

            if (!sdp) {
                console.error('answer.sdp –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è null');
                return;
            }
            this.sendSignal({
                to: id,
                type: 'answer',
                sdp: sdp,
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
        }
    }

    public async handleSignal(data: any) {
        const { from, type, sdp, candidate } = data;
        console.log('–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞:', type);
        let peerConnection = this.peerConnections.get(from) || false;
        if (!peerConnection) {
            peerConnection = await this.createPeerConnection(from);
        }

        switch (type) {
            case 'offer':
                // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π SDP
                const optimizedOfferSdp = this.optimizeSdpForHighQualityAudio(sdp);
                await peerConnection.setRemoteDescription(new RTCSessionDescription({ 
                    type, 
                    sdp: optimizedOfferSdp 
                }));
                await this.createAnswer(from);
                break;
            case 'answer':
                // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π SDP
                const optimizedAnswerSdp = this.optimizeSdpForHighQualityAudio(sdp);
                await peerConnection.setRemoteDescription(new RTCSessionDescription({ 
                    type, 
                    sdp: optimizedAnswerSdp 
                }));
                break;
            case 'candidate':
                await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                break;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SDP —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞
    private optimizeSdpForHighQualityAudio(sdp: string): string {
        let optimizedSdp = sdp;
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–¥–µ–∫–∞ Opus —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∏—Ç—Ä–µ–π—Ç–æ–º
        optimizedSdp = optimizedSdp.replace(
            /m=audio (\d+) RTP\/SAVPF ([\d\s]+)/,
            (_match, port, codecs) => {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Opus –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫
                const opusCodec = '111'; // Opus –∫–æ–¥–µ–∫
                const newCodecs = `${opusCodec} ${codecs.replace(opusCodec, '').trim()}`;
                return `m=audio ${port} RTP/SAVPF ${newCodecs}`;
            }
        );
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Opus –∫–æ–¥–µ–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        optimizedSdp = optimizedSdp.replace(
            /a=fmtp:111 (.+)/,
            (_match, _params) => {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è Opus
                const optimizedParams = [
                    'minptime=10',           // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–∞–∫–µ—Ç–∞
                    'useinbandfec=1',         // –í–∫–ª—é—á–∞–µ–º FEC –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤
                    'stereo=1',               // –í–∫–ª—é—á–∞–µ–º —Å—Ç–µ—Ä–µ–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                    'sprop-stereo=1',        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–µ—Ä–µ–æ
                    'maxplaybackrate=48000', // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                    'maxaveragebitrate=256000', // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                    'cbr=0',                 // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                    'dtx=0',                 // –û—Ç–∫–ª—é—á–∞–µ–º DTX –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                    'application=voip'        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è VoIP
                ].join(';');
                return `a=fmtp:111 ${optimizedParams}`;
            }
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!optimizedSdp.includes('a=fmtp:111')) {
            const opusFmtp = 'a=fmtp:111 minptime=10;useinbandfec=1;stereo=1;sprop-stereo=1;maxplaybackrate=48000;maxaveragebitrate=256000;cbr=0;dtx=0;application=voip';
            optimizedSdp = optimizedSdp.replace(/(a=rtcp-fb:111 .+)/, `$1\n${opusFmtp}`);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        optimizedSdp = optimizedSdp.replace(
            /a=rtcp-fb:111 (.+)/,
            (_match, _params) => {
                const enhancedParams = [
                    'goog-remb',     // Google REMB –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–∏—Ç—Ä–µ–π—Ç–∞
                    'transport-cc', // Transport-wide congestion control
                    'ccm fir',      // Codec Control Messages
                    'nack',         // Negative acknowledgments
                    'nack pli'      // Picture Loss Indication
                ].join(' ');
                return `a=rtcp-fb:111 ${enhancedParams}`;
            }
        );
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞
        optimizedSdp = optimizedSdp.replace(
            /a=extmap:(\d+) urn:ietf:params:rtp-hdrext:ssrc-audio-level/,
            'a=extmap:$1 urn:ietf:params:rtp-hdrext:ssrc-audio-level'
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        if (!optimizedSdp.includes('urn:ietf:params:rtp-hdrext:ssrc-audio-level')) {
            optimizedSdp = optimizedSdp.replace(
                /(a=extmap:\d+ .+)/,
                '$1\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level'
            );
        }
        
        console.log('SDP –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞');
        return optimizedSdp;
    }

    //–ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏
    private addRemoteStream(track: any, id: string): void {
        console.log('–ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç–æ–∫', id);
        let remoteStream = this.remoteStreams.get(id);
        if (!remoteStream) {
            remoteStream = new MediaStream();
            this.remoteStreams.set(id, remoteStream);
            console.log('–£–¥–∞–ª—ë–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', id);
            
            // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const audioContext = new AudioContext();
            const gainNode = audioContext.createGain();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
            const initialVolume = participantVolumeStore.getParticipantVolume(id);
            gainNode.gain.value = initialVolume / 100;
            
            this.audioContexts.set(id, audioContext);
            this.gainNodes.set(id, gainNode);
            
            // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ DOM
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            const audioElement = document.createElement('audio');
            audioElement.srcObject = remoteStream;
            audioElement.autoplay = true;
            audioElement.muted = true; // –í—Å–µ–≥–¥–∞ muted, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Web Audio API
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è loadedmetadata
            audioElement.addEventListener('loadedmetadata', () => {
                console.log('–ê—É–¥–∏–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
                // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                const currentStream = this.remoteStreams.get(id);
                if (currentStream && currentStream.getAudioTracks().length > 0) {
                    this.setupAudioProcessing(id, currentStream);
                }
            });
            
            // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ DOM, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è Web Audio API
            this.remoteAudioElements.set(id, audioElement); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        } else {
            console.log('remoteStream –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –ø–æ—Ç–æ–∫
        remoteStream.addTrack(track);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏ –≤ –ø–æ—Ç–æ–∫–µ, –∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        if (remoteStream.getAudioTracks().length > 0 && !this.audioContexts.get(id)?.state.includes('closed')) {
            this.setupAudioProcessing(id, remoteStream);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    private setupAudioProcessing(id: string, remoteStream: MediaStream): void {
        const audioContext = this.audioContexts.get(id);
        const gainNode = this.gainNodes.get(id);
        
        if (!audioContext || !gainNode) {
            console.error('AudioContext –∏–ª–∏ GainNode –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if (this.audioSources.has(id)) {
            console.log('–ê—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏
            if (remoteStream.getAudioTracks().length === 0) {
                console.warn('–ü–æ—Ç–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω
            if (!audioContext.state.includes('closed')) {
                const source = audioContext.createMediaStreamSource(remoteStream);
                
                // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                const compressor = audioContext.createDynamicsCompressor();
                compressor.threshold.value = -24; // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥
                compressor.knee.value = 30; // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
                compressor.ratio.value = 4; // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                compressor.attack.value = 0.003; // –ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞
                compressor.release.value = 0.25; // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–∞
                const voiceEnhancer = audioContext.createBiquadFilter();
                voiceEnhancer.type = 'peaking';
                voiceEnhancer.frequency.value = 1500; // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–∞
                voiceEnhancer.Q.value = 0.7;
                voiceEnhancer.gain.value = 2; // –õ–µ–≥–∫–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —á–∞—Å—Ç–æ—Ç
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —à—É–º–æ–≤
                const highpassFilter = audioContext.createBiquadFilter();
                highpassFilter.type = 'highpass';
                highpassFilter.frequency.value = 80; // –£–±–∏—Ä–∞–µ–º –Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ —à—É–º—ã
                highpassFilter.Q.value = 0.5;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —à—É–º–æ–≤
                const lowpassFilter = audioContext.createBiquadFilter();
                lowpassFilter.type = 'lowpass';
                lowpassFilter.frequency.value = 8000; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —á–∞—Å—Ç–æ—Ç—ã
                lowpassFilter.Q.value = 0.5;
                
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                source.connect(highpassFilter);
                highpassFilter.connect(lowpassFilter);
                lowpassFilter.connect(voiceEnhancer);
                voiceEnhancer.connect(compressor);
                compressor.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                this.audioSources.set(id, source);
                console.log('–ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º VoiceActivity –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                this.setupRemoteVoiceActivity(id, remoteStream);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id, error);
        }
    }

    public resendlocalStream() {
        console.log('WebRTCClient: Resending local stream...');
        if (audioSettingsStore.stream) {
            const newAudioTrack = audioSettingsStore.stream.getAudioTracks()[0];
            console.log('WebRTCClient: New audio track:', newAudioTrack?.label, 'enabled:', newAudioTrack?.enabled);
            
            this.peerConnections.forEach((peerConnection, socketId) => {
                const sender = peerConnection.getSenders().find((s) => s.track?.kind === 'audio');
                if (sender && newAudioTrack) {
                    console.log('WebRTCClient: Replacing audio track for peer:', socketId);
                    sender.replaceTrack(newAudioTrack);
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ mute
                    newAudioTrack.enabled = !audioSettingsStore.isMicrophoneMuted;
                    console.log('WebRTCClient: Audio track replaced, enabled:', newAudioTrack.enabled);
                } else {
                    console.warn('WebRTCClient: No audio sender found for peer:', socketId);
                }
            });
        } else {
            console.error('WebRTCClient: No local stream available for resending');
        }
    }

    private addLocalStream(id: string): void {
        const peerConnection = this.peerConnections.get(id);
        console.log('add-local-stream', peerConnection);
        if (audioSettingsStore.stream) {
            audioSettingsStore.stream.getTracks().forEach((track) => {
                //–ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º –∏ –ø–∏—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å—Ç—Ä–∏–º
                peerConnection && peerConnection.addTrack(track, audioSettingsStore.stream);
                track.enabled = !audioSettingsStore.isMicrophoneMuted;
            });
        } else {
            console.log('üöÄ ~ WebRTCClient ~ addLocalStream ~ localStream:', this.localStream);
            console.error('—á–µ–≥–æ —Ç–æ –Ω–µ—Ç ');
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º mute –¥–ª—è –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    public setRemoteAudioMuted(muted: boolean): void {
        this.gainNodes.forEach((gainNode, socketId) => {
            if (muted) {
                gainNode.gain.value = 0;
            } else {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑ store
                const volume = participantVolumeStore.getParticipantVolume(socketId);
                gainNode.gain.value = volume / 100;
            }
        });
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    public setParticipantVolume(socketId: string, volume: number): void {
        const gainNode = this.gainNodes.get(socketId);
        if (gainNode) {
            gainNode.gain.value = volume / 100;
            participantVolumeStore.setParticipantVolume(socketId, volume);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
    public getParticipantVolume(socketId: string): number {
        return participantVolumeStore.getParticipantVolume(socketId);
    }

    // –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ

    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è
    public disconnectPeer(id: string) {
        const peerConnection = this.peerConnections.get(id);
        if (peerConnection) {
            peerConnection.close();
            this.peerConnections.delete(id);
            console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${id} –∑–∞–∫—Ä—ã—Ç–æ`);
        }

        const remoteStream = this.remoteStreams.get(id);
        if (remoteStream) {
            remoteStream.getTracks().forEach((track) => track.stop());
            this.remoteStreams.delete(id);
        }

        // –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ—ç–ª–µ–º–µ–Ω—Ç
        const audioElement = this.remoteAudioElements.get(id);
        if (audioElement) {
            // –ù–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –∏–∑ DOM, —Ç–∞–∫ –∫–∞–∫ –º—ã –µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏
            this.remoteAudioElements.delete(id);
        }

        // –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ gain node
        const audioContext = this.audioContexts.get(id);
        if (audioContext) {
            audioContext.close();
            this.audioContexts.delete(id);
        }
        this.gainNodes.delete(id);
        this.audioSources.delete(id);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VoiceActivity –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        voiceActivityService.stopMonitoring(id);

        // –£–¥–∞–ª—è–µ–º –∏–∑ store –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        participantVolumeStore.removeParticipant(id);
    }
    // –∫–æ–≥–¥–∞ –º—ã —Å–∞–º–∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
    public disconect() {
        //–∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
        this.peerConnections.forEach((peerConnection) => {
            peerConnection.close();
        });
        this.peerConnections.clear();

        if (audioSettingsStore.stream) {
            audioSettingsStore.stream.getTracks().forEach((track) => track.stop());
        }

        //—Ç–æ—Ä–º–æ–∑–∏–º —Å—Ç—Ä–∏–º—ã
        this.remoteStreams.forEach((stream) => {
            stream.getTracks().forEach((track) => track.stop());
        });
        this.remoteStreams.clear();

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ—ç–ª–µ–º–µ–Ω—Ç—ã
        this.remoteAudioElements.clear();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        this.audioContexts.forEach((audioContext) => {
            audioContext.close();
        });
        this.audioContexts.clear();
        this.gainNodes.clear();
        this.audioSources.clear();

        // –û—á–∏—â–∞–µ–º store –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        participantVolumeStore.resetAllVolumes();
        
        // –û—á–∏—â–∞–µ–º VoiceActivity —Å–µ—Ä–≤–∏—Å
        voiceActivityService.cleanup();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VoiceActivity –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    private setupLocalVoiceActivity(): void {
        if (audioSettingsStore.stream) {
            console.log('Setting up local VoiceActivity, stream tracks:', audioSettingsStore.stream.getAudioTracks().length);
            voiceActivityService.startMonitoring('local', audioSettingsStore.stream);
            console.log('VoiceActivity –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞');
        } else {
            console.log('No stream available for local VoiceActivity setup');
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VoiceActivity –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    private setupRemoteVoiceActivity(userId: string, remoteStream: MediaStream): void {
        voiceActivityService.startMonitoring(userId, remoteStream);
        console.log(`VoiceActivity –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${userId}`);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public getUserVoiceActivity(userId: string): boolean {
        return voiceActivityService.getUserActivity(userId);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public getUserVolumeLevel(userId: string): number {
        return voiceActivityService.getUserVolume(userId);
    }
}

export default WebRTCClient;

